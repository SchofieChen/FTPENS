[loggers]
# 配置logger信息。必須包含一個名字叫做root的logger，當使用無參函數logging.getLogger()時，默認返回root這個logger，其他自定義logger可以通過 logging.getLogger("fileAndConsole") 方式進行調用
keys=root
[handlers]
# 定義聲明handlers信息。
keys=FileHandler,ConsoleHandler

[formatters]
# 設置日誌格式
keys=FileFormatter, ConsoleFormatter

[logger_root]
# 對loggers中聲明的logger進行逐個配置，且要一一對應,在所有的logger中，必須制定lebel和handlers這兩個選項，對於非roothandler，還需要添加一些額外的option，其中qualname表示它在logger層級中的名字，在應用代碼中通過這個名字制定所使用的handler，即 logging.getLogger("fileAndConsole")，handlers可以指定多個，中間用逗號隔開，比如handlers=fileHandler,consoleHandler，同時制定使用控制檯和文件輸出日誌
level=DEBUG
handlers=FileHandler,ConsoleHandler

[handler_FileHandler]
# 在handler中，必須指定class和args這兩個option，常用的class包括 StreamHandler（僅將日誌輸出到控制檯）、FileHandler（將日誌信息輸出保存到文件）、RotaRotatingFileHandler（將日誌輸出保存到文件中，並設置單個日誌wenj文件的大小和日誌文件個數），args表示傳遞給class所指定的handler類初始化方法參數，它必須是一個元組（tuple）的形式，即便只有一個參數值也需要是一個元組的形式；裏面指定輸出路徑，比如輸出的文件名稱等。level與logger中的level一樣，而formatter指定的是該處理器所使用的格式器，這裏指定的格式器名稱必須出現在formatters這個section中，且在配置文件中必須要有這個formatter的section定義；如果不指定formatter則該handler將會以消息本身作爲日誌消息進行記錄，而不添加額外的時間、日誌器名稱等信息；
class=logging.handlers.TimedRotatingFileHandler
args=("%(log_filename)s", "D", 1, 30)
level=DEBUG
formatter=FileFormatter

[handler_ConsoleHandler]
class=StreamHandler
args=()
level=DEBUG
formatter=ConsoleFormatter

[formatter_FileFormatter]
format=%(asctime)s %(name)-12s %(levelname)-8s %(message)s

[formatter_ConsoleFormatter]
format=%(message)s